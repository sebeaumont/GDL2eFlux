#+TITLE: CIFAR-10 Image Classification Task 
#+AUTHOR: Simon Beaumont
#+EMAIL: datalligator@icloud.com
#+SETUPFILE: org-source-setup.org

* GDL2e Chapter 2 Examples

** Some basic utility functions
*** Flux and required packages.
#+begin_src jupyter-julia
using Flux, Metal, MLUtils, Statistics, ProgressMeter
#+end_src

#+RESULTS:

*** Get the CIFAR10 image data
#+begin_src jupyter-julia
using MLDatasets: CIFAR10

# Get the 60,000 32x32 pixel color image data
function cifar10_data() 
    # Split the 60,000 images into training and testing observations
    # and make sure we have normalized Float32 pixel data.
    (CIFAR10(Tx=Float32, split=:train), CIFAR10(Tx=Float32, split=:test))
end
#+end_src

#+RESULTS:
: cifar10_data (generic function with 1 method)

*** Create one-hot encoding of targets/labels
#+begin_src jupyter-julia 
function onehotlabels(data ::CIFAR10)
    onehotbatch(data.targets, range(extrema(data.targets)...))
end
#+end_src

#+RESULTS:
: onehotlabels (generic function with 1 method)

*** Flatten image data into vectors
#+begin_src jupyter-julia
function vecfeatures(data::CIFAR10)
    # TODO make this generic to data shapes
    reshape(data.features, 32^2 * 3, :)
end
#+end_src

#+RESULTS:
: vecfeatures (generic function with 1 method)

*** Dataloader
#+begin_src jupyter-julia
function loader(data::CIFAR10; batchsize, flatten)
    if flatten
        x = vecfeatures(data)
    else
        x = data
    end
    y = onehotlabels(data)
    Flux.DataLoader((x, y); batchsize, shuffle=true)
end
#+end_src

#+RESULTS:
: loader (generic function with 1 method)

*** Compute accuracy of predictions
#+begin_src jupyter-julia
function accuracy(model, data::CIFAR10, args::TrainingParams)
    (x, y) = only(loader(data; batchsize=(length(data)), flatten=args.flatten))
    y_hat = model(x)
    iscorrect = Flux.onecold(y_hat) .== Flux.onecold(y)
    round(100 * mean(iscorrect); digits=2)
end
#+end_src

#+RESULTS:
: accuracy (generic function with 2 methods)

** Let's put those functions to work to train the model network.
We provide a set of training /hyperparameters/ but prefer to call these training
parameters.
#+begin_src jupyter-julia
struct TrainingParams
    flatten   :: Bool
    batchsize :: Int
    epochs    :: Int
    learnrate :: Float64
end

# constructor with defaults
function trainparams(;flatten::Bool=false, batchsize::Int, epochs::Int, learnrate::Float64)
    TrainingParams(flatten, batchsize, epochs, learnrate)
end

# TODO paramterise: batchsize, flatten, epochs, training rate
function trainwith(model, train_data::CIFAR10, args::TrainingParams)
    @info "trainwith" args
    # loader
    train_loader = loader(train_data, batchsize=args.batchsize, flatten=args.flatten)
    # optimizer state with training rate
    opt_state = Flux.setup(Adam(args.learnrate), model)
    losses = [] # keep track of loss at each epoch
    
    @showprogress for epoch in 1:args.epochs
        for (x, y) in train_loader
            # compute loss and gradients
            l, gs = Flux.withgradient(m -> Flux.crossentropy(m(x), y), model)
            # update model parameters
            Flux.update!(opt_state, model, gs[1]) # if gs are gradients what is [1]?
            # accumulate losses for logging
            push!(losses, l)
        end
    end
    return (model, losses, length(train_loader))
end
#+end_src

#+RESULTS:
: trainwith (generic function with 4 methods)

** Main train and test
#+begin_src jupyter-julia
using Plots

function trainandtest(model, tparam::TrainingParams)
    @info "Loading CIFAR10 data..."
    train, test = cifar10_data()

    @info "Training..."
    (trained, losses, n) = trainwith(model, train, tparam)
    
    @info "Model:" trained

    @info "Accuracy:" accuracy(trained, train, tparam) accuracy(trained, test, tparam)

    # output a plot of loss
    plot(losses; xaxis=(:log10, "iteration"),
         yaxis="loss", label="per batch")
    # mean loss for epoch
    plot!(n:n:length(losses), mean.(Iterators.partition(losses, n)),
          label="epoch mean", dpi=200)
end
#+end_src

#+RESULTS:
: trainandtest (generic function with 3 methods)

** The simple model from GDL2e Chapter 2

   Note: [[https://fluxml.ai/Flux.jl/stable/models/nnlib/#NNlib.softmax][softmax]] must not be passed to layers like Dense, which accept
   an activation function, as activation is broadcasted; if you get
   errors dispatching softmax this might be the problem.
   
#+begin_src jupyter-julia
function simplemodel()
    Chain(Dense(32^2 * 3 => 200, relu),
          Dense(200 => 150, relu),
          Dense(150 => 10),
          softmax)
end
#+end_src

#+RESULTS:
: simplemodel (generic function with 1 method)



** Train and test the results of simple model
#+begin_src jupyter-julia
trainandtest(simplemodel(),
             trainparams(flatten=true,
                         batchsize=32,
                         epochs=10,
                         learnrate=5e-4))
#+end_src

#+RESULTS:
:RESULTS:
: [ Info: Loading CIFAR10 data...
: [ Info: Training...
: ┌ Info: trainwith
: └   args = TrainingParams(true, 32, 10, 0.0005)
: Progress: 100%|█████████████████████████████████████████| Time: 0:01:06
: 
#+begin_example
┌ Info: Model:
│   trained =
│    Chain(
│      Dense(3072 => 200, relu),             # 614_600 parameters
│      Dense(200 => 150, relu),              # 30_150 parameters
│      Dense(150 => 10),                     # 1_510 parameters
│      NNlib.softmax,
└    )                   # Total: 6 arrays, 646_260 parameters, 2.466 MiB.
┌ Info: Accuracy:
│   accuracy(trained, train, tparam) = 52.28
└   accuracy(trained, test, tparam) = 48.64
#+end_example
[[file:./.ob-jupyter/c5327efd8b2a046ca43d0ccbbaf2807bdb4959a4.svg]]
:END:

** The convolutional model (CNN)
Following the batch, activation, dropout (BAD) method.  NB: a kernel
size of 3 in /Keras/ conv2d is (3,3) in the more generic /Flux/ Conv.

#+begin_src jupyter-julia
function cnnmodel()
    Chain(
        # 1
        Conv((3,3), 3 => 32; pad=SamePad(), stride=1),
        BatchNorm(32, rrelu),
        # 2
        Conv((3,3), 32 => 32; pad=SamePad(), stride=2),
        BatchNorm(32, rrelu),
        # 3
        Conv((3,3), 32 => 64; pad=SamePad(), stride=1),
        BatchNorm(64, rrelu),
        # 4
        Conv((3,3), 64 => 64, pad = SamePad(), stride=2),
        BatchNorm(64, rrelu),
        # 5
        MLUtils.flatten,
        Dense(4096 => 128),
        BatchNorm(128, rrelu),
        Dropout(0.5),
        # 6
        Dense(128 => 10),
        softmax
    )
end
#+end_src

#+RESULTS:
: cnnmodel (generic function with 1 method)
